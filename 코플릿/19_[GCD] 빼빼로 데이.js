'use strict';
//Created by 권순기 on 2021/03/14

/* 문제설명
오늘은 빼빼로 데이입니다. 한 회사의 팀장은 출근길에 아몬드 빼빼로 A 개와 누드 빼빼로 N 개를 구매하여 아침 일찍 출근길에 나섰습니다.

팀장은 자신보다 먼저 출근해있는 직원들에게 빼빼로를 모두 나누어 주려고 합니다.
단, 직원들이 서로 같은 개수의 빼빼로를 받지 못하면 시기 질투할 수 있으므로 직원들에게 같은 개수를 나누어 주어야 하며,
한 가지 종류의 빼빼로만 받는 경우가 없어야 합니다.

회사에 도착하기 전이기 때문에 이미 출근해 있는 직원들이 몇 명인지 모르는 상황입니다.
예를 들어, 팀장이 아몬드 빼빼로를 4개, 누드 빼빼로를 8개를 구매 했다면, 다음과 같이 세 가지 방법으로 나누어 줄 수 있습니다.

출근한 직원이 1명이라면 아몬드 빼빼로 4개와 누드 빼빼로 8개를 줄 수 있습니다.
출근한 직원이 2명이라면 아몬드 빼빼로 2개와 누드 빼빼로 4개를 각각 줄 수 있습니다.
출근한 직원이 4명이라면 아몬드 빼빼로 1개와 누드 빼빼로 2개를 각각 줄 수 있습니다.
팀장은 출근한 직원 수에 따라 어떻게 빼빼로를 나누어 줄지 고민하고 있습니다.
여러분이 직원 수에 따라 빼빼로를 나누어 주는 방법을 구하는 솔루션을 제공해 주세요. */

/* 입출력 예시
let A = 4;
let N = 8;

let output = divideChocolateStick(A, N);
console.log(output) 
// [[1, 4, 8], [4, 1, 2], [2, 2, 4]] 또는,
// [[1, 4, 8], [2, 2, 4], [4, 1, 2]] 
// 순서는 상관없습니다 */

function divideChocolateStick(A, N) {
  // TODO: 여기에 코드를 작성합니다.

  function gcd(a, b) {
    return a % b === 0 ? b : gcd(b, a % b);
  }

  let cd = gcd(A, N);
  let sqrt = Math.sqrt(cd); //최대공약수의 제곱근
  let result = [];
  let pairCd;

  for (let i = 1; i <= sqrt; i++) {
    if (cd % i === 0) {
      //i는 cd의 약수들이어야한다.
      result.push([i, A / i, N / i]);

      if (i !== sqrt) {
        //제곱근이면 짝약수 없으므로 제외.
        pairCd = cd / i; //짝 약수도 넣어줘야지
        result.push([pairCd, A / pairCd, N / pairCd]);
      }
    }
  }
  return result;
}

// 6 9
// 최대공약수는 3
// [people = 최대공약수 3의 약수들이 들어감, A/people, N/people]
// A의 제곱근 = Math.sqrt(A)
